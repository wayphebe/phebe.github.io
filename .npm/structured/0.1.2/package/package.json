{"name":"structured","version":"0.1.2","description":"Simple interface for checking structure of JS code against a template, backed by Esprima.","main":"structured.js","scripts":{"test":"node testrunner"},"repository":{"type":"git","url":"git://github.com/Khan/structuredjs.git"},"keywords":["parsing","analysis","ast","checker","structure"],"author":{"name":"swestwood"},"license":"BSD","bugs":{"url":"https://github.com/Khan/structuredjs/issues"},"dependencies":{"esprima":"~4.0.0","underscore":"~1.5.1","react":"^0.11.1","escodegen":"^1.3.3"},"devDependencies":{"qunit":"~0.5.16"},"gitHead":"cd3aba233386d251cd05bfafc625cc882c51abad","readme":"**structured.js** is a Javascript library that provides a simple interface for verifying the structure of Javascript code, backed by the abstract syntax tree generated by Esprima. It is particularly useful in checking beginner code to provide feedback as part of [Khan Academy's CS curriculum](https://www.khanacademy.org/cs).\n\nStructured.js works in-browser `<script src='structured.js'></script>`, or as a standalone npm module.\n\nA structure is any valid Javascript code which contains blanks ( _ characters) and stand-ins ($str) to match values. The structure is sensitive to nesting and ordering. The matcher only requires that code contain the structure -- extra code has no effect.\n\n### Demo\n\n**[Try structured.js yourself](http://khan.github.io/structuredjs/index.html)** to see it in action.\n\nAlso check out the [pretty display demo](http://khan.github.io/structuredjs/pretty-display/index.html) for more user-friendly structures.\n\n### Examples\n\n    var structure = function() {\n      if (_) {\n        _ += _;\n        for (var $a = _; $a < $b; $a += _) {\n            _($a, $b, 30, 30);\n        }\n      }\n    };\n\n    var code = \"/* some code */\";\n\n    var result = Structured.match(code, structure);\n\nReturns true for the code:\n\n    if (y > 30 && x > 13) {\n       x += y;\n       for (var i = 0; i < 100; i += 1) {\n         rect(i, 100, 30, 30);\n         bar();\n       }\n    }\n\n**[Check out the demo](http://khan.github.io/structuredjs/index.html)** for more, or look at the tests.\n\n### Advanced -- Variable Callbacks\n\nTo allow tighter control over what exactly is allowed to match your $variable, you may provide a mapping from variable names to function callbacks. These callbacks can enable NOT, OR, and AND functionality on the wildcard variables, for example.\n\nCallback parameters should be the same as the name of the wildcard variables they are matching. The callback takes in a proposed value for the variable and accepts/rejects it by returning a boolean. The callback may instead return an object such as `{failure: \"failure message\"}` as well if you'd like to explain exactly why this value is not allowed.\n\nFor instance, say we want to check the value we assign to a var -- check that it is really big, and that it is bigger than whatever we increment it by. It would look like this:\n\n    var structure = function() {var _ = $num; $num += $incr; };\n    var code = \"var foo = 400; foo += 3;\";\n    var varCallbacks = [\n      function($num) {\n        return num.value > 100;  // Just return true/false\n      },\n      function($num, $incr) {\n        if (num.value <= incr.value) {\n          // Return the failure message\n          return {failure: \"The increment must be smaller than the number.\"};\n        }\n        return true;\n      }\n    ];\n    var match = Structured.match(code, structure, {varCallbacks: varCallbacks});\n    if (!match) {\n      // varCallbacks.failure contains the error message, if any.\n      console.log(\"The problem is: \" + varCallbacks.failure);\n    }\n\nNote that the callbacks receive objects that contain a subtree of the [Esprima](http://esprima.org) parse tree, not a raw value. Also note that the callbacks run statically, not dynamically -- so, you will only be able to directly check literal values (i.e., 48), not computed values (24*2, myVar, etc). The callbacks also ignore any variable callbacks for variables that do not actually appear in the structure you've passed in.\n\nGo to [the demo](http://khan.github.io/structuredjs/index.html) to try it out.\n\n### Tests\n\nRun structured.js tests with `npm test` or by opening browser-test/index.html.\n\n### Dependencies\n\n[Esprima](http://esprima.org) and [UnderscoreJS](http://underscorejs.org) for the framework,\n[QUnit](http://qunitjs.com/) for the test suite,\n[RainbowJS](http://craig.is/making/rainbows/) for prettified structures.\n","readmeFilename":"README.md","homepage":"https://github.com/Khan/structuredjs#readme","_id":"structured@0.1.2","_shasum":"20b81d1204c3cf7b2d53f2125cb3b776e10ff0ce","_from":"ryzacinc/structuredjs","_resolved":"git://github.com/ryzacinc/structuredjs.git#cd3aba233386d251cd05bfafc625cc882c51abad"}